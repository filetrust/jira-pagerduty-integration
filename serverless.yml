service: pjsync

provider:
  name: aws
  runtime: python3.7
  stage: ${env:STAGE}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "*"
  cronInterval: ${env:PAGERDUTY_CRON_INTERVAL}
  environment:
    INCIDENTS_TABLE: ${self:custom.incidentsTableName}

functions:
  app:
    handler: wsgi_handler.handler
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'
  cron:
    handler: pd_cron.run
    events:
      - schedule: 'rate(${self:provider.cronInterval})'

plugins:
  - serverless-python-requirements
  - serverless-dotenv-plugin
  - serverless-wsgi
  - serverless-dynamodb-local

custom:
  incidentsTableName: 'incidents-${self:provider.stage}'
  wsgi:
    app: app.app
    packRequirements: false
    pythonBin: python3
  pythonRequirements:
    dockerizePip: true
  dynamodb:
    start:
      port: 8002
      inMemory: true
      migrate: true
    stages:
      - dev
      - test

package:
  exclude:
    - env/**

resources:
  Resources:
    IncidentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.incidentsTableName}
        AttributeDefinitions:
          - AttributeName: incidentId
            AttributeType: S
        KeySchema:
          - AttributeName: incidentId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
